---

- hosts: loxa_servers
  become: true
  tasks:
    - name: Desactivar actualizaciones automáticas - detener y deshabilitar servicios
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - apt-daily.service
        - apt-daily-upgrade.service
        - apt-daily.timer
        - apt-daily-upgrade.timer
      ignore_errors: yes

    - name: Eliminar paquete unattended-upgrades
      apt:
        name: unattended-upgrades
        state: absent

    - name: Actualizar el sistema
      apt:
        upgrade: dist
        update_cache: yes
      tags: always

    - name: Instalar Docker y Docker Compose
      apt:
        name:
          - docker.io
          - docker-compose
        state: present

    - name: Habilitar Docker al iniciar el sistema
      systemd:
        name: docker
        enabled: yes

    - name: Iniciar el servicio Docker
      systemd:
        name: docker
        state: started

    # Instalación condicional de BillionMail
    - name: Verificar si los contenedores de BillionMail están corriendo
      shell: docker compose ps -q
      args:
        chdir: /opt/BillionMail
      register: billionmail_containers
      ignore_errors: yes
      changed_when: false

    - name: Clonar repositorio BillionMail
      git:
        repo: "https://github.com/aaPanel/BillionMail"
        dest: /opt/BillionMail
        version: main
        force: yes
      when: billionmail_containers.rc != 0 or billionmail_containers.stdout == ""

    - name: Ejecutar instalador de BillionMail
      command: bash install.sh
      args:
        chdir: /opt/BillionMail
      when: billionmail_containers.rc != 0 or billionmail_containers.stdout == ""
      register: billionmail_install

    - name: Mostrar resultado de instalación de BillionMail
      debug:
        var: billionmail_install.stdout_lines
      when: billionmail_install is defined and billionmail_install.stdout_lines is defined

    # Cockpit
    - name: Instalar Cockpit
      apt:
        name:
          - cockpit
        state: present

    - name: Habilitar y arrancar Cockpit
      systemd:
        name: cockpit.socket
        enabled: yes
        state: started  

    # PostgreSQL 16
    - name: Instalar dependencias necesarias para repositorio PostgreSQL
      apt:
        name:
          - wget
          - gnupg
          - lsb-release
        state: present

    - name: Importar clave GPG del repositorio PostgreSQL
      shell: |
        wget -qO - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql.gpg
      args:
        creates: /usr/share/keyrings/postgresql.gpg

    - name: Agregar repositorio oficial de PostgreSQL 16
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
        filename: "pgdg"
        state: present

    - name: Actualizar caché después de agregar el repositorio
      apt:
        update_cache: yes

    - name: Instalar PostgreSQL 16
      apt:
        name: postgresql-16
        state: present

    - name: Asegurar que el servicio PostgreSQL esté corriendo y habilitado
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Instalar python3-psycopg2 para gestión de PostgreSQL
      apt:
        name: python3-psycopg2
        state: present

    - name: Configurar contraseña para usuario postgres
      postgresql_user:
        name: postgres
        password: "s3rv3rc@p2023"
        login_user: postgres
        login_password: ""
      become: yes
      become_user: postgres
      ignore_errors: yes

    - name: Crear archivo .pgpass para autenticación automática
      lineinfile:
        path: "/var/lib/postgresql/.pgpass"
        line: "localhost:5432:*:postgres:s3rv3rc@p2023"
        create: yes
        owner: postgres
        group: postgres
        mode: '0600'

    # PgBouncer
    - name: Instalar PgBouncer
      apt:
        name: pgbouncer
        state: present

    # Apache y PHP
    - name: Instalar Apache2 y PHP
      apt:
        name:
          - apache2
          - libapache2-mod-php
          - vim
        state: latest
        update_cache: yes

    - name: Asegurar que el servicio Apache2 esté corriendo y habilitado
      service:
        name: apache2
        state: started
        enabled: yes

    # Firewall
    - name: Permitir puertos necesarios con UFW
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "22"
        - "80"
        - "443"
        - "9595"
        - "9090"
        - "8080"
        - "3000"
        - "8181"

    - name: Habilitar UFW si no está activo
      ufw:
        state: enabled
        policy: deny
